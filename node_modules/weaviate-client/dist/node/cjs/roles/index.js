'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
exports.permissions = void 0;
const util_js_1 = require('./util.js');
const roles = (connection) => {
  return {
    listAll: () => connection.get('/authz/roles').then(util_js_1.Map.roles),
    byName: (roleName) => connection.get(`/authz/roles/${roleName}`).then(util_js_1.Map.roleFromWeaviate),
    assignedUserIds: (roleName) => connection.get(`/authz/roles/${roleName}/users`),
    create: (roleName, permissions) => {
      const perms = util_js_1.Map.flattenPermissions(permissions).flatMap(util_js_1.Map.permissionToWeaviate);
      return connection
        .postEmpty('/authz/roles', {
          name: roleName,
          permissions: perms,
        })
        .then(() => util_js_1.Map.roleFromWeaviate({ name: roleName, permissions: perms }));
    },
    delete: (roleName) => connection.delete(`/authz/roles/${roleName}`, null),
    exists: (roleName) =>
      connection
        .get(`/authz/roles/${roleName}`)
        .then(() => true)
        .catch(() => false),
    addPermissions: (roleName, permissions) =>
      connection.postEmpty(`/authz/roles/${roleName}/add-permissions`, { permissions }),
    removePermissions: (roleName, permissions) =>
      connection.postEmpty(`/authz/roles/${roleName}/remove-permissions`, { permissions }),
    hasPermissions: (roleName, permission) =>
      Promise.all(
        (Array.isArray(permission) ? permission : [permission])
          .flatMap((p) => util_js_1.Map.permissionToWeaviate(p))
          .map((p) => connection.postReturn(`/authz/roles/${roleName}/has-permission`, p))
      ).then((r) => r.every((b) => b)),
  };
};
exports.permissions = {
  backup: (args) => {
    const collections = Array.isArray(args.collection) ? args.collection : [args.collection];
    return collections.flatMap((collection) => {
      const out = { collection, actions: [] };
      if (args.manage) out.actions.push('manage_backups');
      return out;
    });
  },
  cluster: (args) => {
    const out = { actions: [] };
    if (args.read) out.actions.push('read_cluster');
    return [out];
  },
  collections: (args) => {
    const collections = Array.isArray(args.collection) ? args.collection : [args.collection];
    return collections.flatMap((collection) => {
      const out = { collection, actions: [] };
      if (args.create_collection) out.actions.push('create_collections');
      if (args.read_config) out.actions.push('read_collections');
      if (args.update_config) out.actions.push('update_collections');
      if (args.delete_collection) out.actions.push('delete_collections');
      return out;
    });
  },
  data: (args) => {
    const collections = Array.isArray(args.collection) ? args.collection : [args.collection];
    return collections.flatMap((collection) => {
      const out = { collection, actions: [] };
      if (args.create) out.actions.push('create_data');
      if (args.read) out.actions.push('read_data');
      if (args.update) out.actions.push('update_data');
      if (args.delete) out.actions.push('delete_data');
      return out;
    });
  },
  nodes: {
    minimal: (args) => {
      const out = {
        collection: '*',
        actions: [],
        verbosity: 'minimal',
      };
      if (args.read) out.actions.push('read_nodes');
      return [out];
    },
    verbose: (args) => {
      const collections = Array.isArray(args.collection) ? args.collection : [args.collection];
      return collections.flatMap((collection) => {
        const out = {
          collection,
          actions: [],
          verbosity: 'verbose',
        };
        if (args.read) out.actions.push('read_nodes');
        return out;
      });
    },
  },
  roles: (args) => {
    const roles = Array.isArray(args.role) ? args.role : [args.role];
    return roles.flatMap((role) => {
      const out = { role, actions: [] };
      if (args.create) out.actions.push('create_roles');
      if (args.read) out.actions.push('read_roles');
      if (args.update) out.actions.push('update_roles');
      if (args.delete) out.actions.push('delete_roles');
      return out;
    });
  },
  tenants: (args) => {
    const collections = Array.isArray(args.collection) ? args.collection : [args.collection];
    return collections.flatMap((collection) => {
      const out = { collection, actions: [] };
      if (args.create) out.actions.push('create_tenants');
      if (args.read) out.actions.push('read_tenants');
      if (args.update) out.actions.push('update_tenants');
      if (args.delete) out.actions.push('delete_tenants');
      return out;
    });
  },
  users: (args) => {
    const users = Array.isArray(args.user) ? args.user : [args.user];
    return users.flatMap((user) => {
      const out = { users: user, actions: [] };
      if (args.assign_and_revoke) out.actions.push('assign_and_revoke_users');
      if (args.read) out.actions.push('read_users');
      return out;
    });
  },
};
exports.default = roles;
